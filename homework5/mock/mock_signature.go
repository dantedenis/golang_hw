// Code generated by MockGen. DO NOT EDIT.
// Source: ./sign/contract/signatyre.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSignature is a mock of Signature interface.
type MockSignature struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureMockRecorder
}

// MockSignatureMockRecorder is the mock recorder for MockSignature.
type MockSignatureMockRecorder struct {
	mock *MockSignature
}

// NewMockSignature creates a new mock instance.
func NewMockSignature(ctrl *gomock.Controller) *MockSignature {
	mock := &MockSignature{ctrl: ctrl}
	mock.recorder = &MockSignatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignature) EXPECT() *MockSignatureMockRecorder {
	return m.recorder
}

// Date mocks base method.
func (m *MockSignature) Date() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Date")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Date indicates an expected call of Date.
func (mr *MockSignatureMockRecorder) Date() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Date", reflect.TypeOf((*MockSignature)(nil).Date))
}

// Equal mocks base method.
func (m *MockSignature) Equal(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Equal indicates an expected call of Equal.
func (mr *MockSignatureMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockSignature)(nil).Equal), arg0)
}

// Name mocks base method.
func (m *MockSignature) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSignatureMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSignature)(nil).Name))
}

// SignatureBytes mocks base method.
func (m *MockSignature) SignatureBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignatureBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SignatureBytes indicates an expected call of SignatureBytes.
func (mr *MockSignatureMockRecorder) SignatureBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignatureBytes", reflect.TypeOf((*MockSignature)(nil).SignatureBytes))
}

// Size mocks base method.
func (m *MockSignature) Size() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(string)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockSignatureMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockSignature)(nil).Size))
}
