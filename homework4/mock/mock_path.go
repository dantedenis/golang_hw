// Code generated by MockGen. DO NOT EDIT.
// Source: ./geocoder/geocoder.go

// Package mock is a generated GoMock package.
package mock

import (
	maps "homework4/maps"
	info "homework4/navigation/info"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGeocoding is a mock of Geocoding interface.
type MockGeocoding struct {
	ctrl     *gomock.Controller
	recorder *MockGeocodingMockRecorder
}

// MockGeocodingMockRecorder is the mock recorder for MockGeocoding.
type MockGeocodingMockRecorder struct {
	mock *MockGeocoding
}

// NewMockGeocoding creates a new mock instance.
func NewMockGeocoding(ctrl *gomock.Controller) *MockGeocoding {
	mock := &MockGeocoding{ctrl: ctrl}
	mock.recorder = &MockGeocodingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeocoding) EXPECT() *MockGeocodingMockRecorder {
	return m.recorder
}

// ReverseGeocoder mocks base method.
func (m *MockGeocoding) ReverseGeocoder(planet maps.PointPlanet) (info.GeocodeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseGeocoder", planet)
	ret0, _ := ret[0].(info.GeocodeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseGeocoder indicates an expected call of ReverseGeocoder.
func (mr *MockGeocodingMockRecorder) ReverseGeocoder(planet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseGeocoder", reflect.TypeOf((*MockGeocoding)(nil).ReverseGeocoder), planet)
}
